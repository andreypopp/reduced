// Generated by CoffeeScript 1.6.3
var END, SKIP, arrayAsSeq, asSeq, empty, makeModule, promiseAsSeq, promiseNextValue, q, valueAsSeq,
  __slice = [].slice;

q = require('kew');

SKIP = 0;

END = 1;

empty = function() {
  return {
    next: function(done) {
      if (done) {
        return done(END);
      }
    }
  };
};

valueAsSeq = function(v) {
  var seen;
  seen = false;
  return {
    next: function(done) {
      if (!seen) {
        seen = true;
        if (done) {
          return done(null, v);
        }
      } else {
        return done(END);
      }
    }
  };
};

arrayAsSeq = function(a) {
  a = a.slice(0);
  return {
    next: function(done) {
      var value;
      if (a.length > 0) {
        value = a.shift();
        if (done) {
          return done(null, value);
        }
      } else {
        return done(END);
      }
    }
  };
};

promiseAsSeq = function(p) {
  var seen;
  seen = false;
  return {
    next: function(done) {
      if (!seen) {
        seen = true;
        return p.then(function(v) {
          if (done) {
            return done(null, v);
          }
        }).end();
      } else {
        return done(END);
      }
    }
  };
};

promiseNextValue = function(seq) {
  var p, resolve;
  p = q.defer();
  resolve = p.resolve.bind(p);
  seq.next(function(s, v) {
    if (s === SKIP) {
      return promiseNextValue(seq).then(resolve);
    } else {
      return resolve([s, v]);
    }
  });
  return p;
};

asSeq = function(v) {
  if (v == null) {
    return empty();
  } else if ((v != null ? v.next : void 0) != null) {
    return v;
  } else if (Array.isArray(v)) {
    return arrayAsSeq(v);
  } else if ((v != null ? v.then : void 0) != null) {
    return promiseAsSeq(v);
  } else {
    return valueAsSeq(v);
  }
};

makeModule = function(asSeq, yieldEvery) {
  var mod,
    _this = this;
  if (yieldEvery == null) {
    yieldEvery = 100;
  }
  return mod = {
    SKIP: SKIP,
    END: END,
    asSeq: asSeq,
    empty: empty,
    repeat: function(v) {
      return {
        next: function(done) {
          return done(null, v);
        }
      };
    },
    lazy: function(seqFactory) {
      var seq;
      seq = void 0;
      return {
        next: function(done) {
          if (seq == null) {
            seq = asSeq(seqFactory());
          }
          return seq.next(done);
        }
      };
    },
    map: function(seq, f) {
      seq = asSeq(seq);
      return {
        next: function(done) {
          return seq.next(function(s, v) {
            if (s != null) {
              return done(s);
            } else {
              return done(null, f(v));
            }
          });
        }
      };
    },
    scan: function(seq, f, acc) {
      seq = asSeq(seq);
      return {
        next: function(done) {
          return seq.next(function(s, v) {
            if (s != null) {
              return done(s);
            } else {
              acc = f(v, acc);
              return done(null, acc);
            }
          });
        }
      };
    },
    fold: function(seq, f, acc) {
      var computed;
      seq = asSeq(seq);
      computed = false;
      return {
        next: function(done) {
          return seq.next(function(s, v) {
            if (computed) {
              return done(END);
            } else if (s === END) {
              computed = true;
              return done(null, acc);
            } else if (s != null) {
              return done(s);
            } else {
              acc = f(v, acc);
              return done(SKIP);
            }
          });
        }
      };
    },
    take: function(seq, n) {
      if (n == null) {
        n = 10;
      }
      seq = asSeq(seq);
      return {
        next: function(done) {
          if (n > 0) {
            return seq.next(function(s, v) {
              if (s != null) {
                return done(s);
              }
              n -= 1;
              return done(null, v);
            });
          } else {
            return done(END);
          }
        }
      };
    },
    drop: function(seq, n) {
      if (n == null) {
        n = 10;
      }
      seq = asSeq(seq);
      return {
        next: function(done) {
          if (n > 0) {
            return seq.next(function(s, v) {
              if (s != null) {
                return done(s);
              }
              n -= 1;
              return done(SKIP);
            });
          } else {
            return seq.next(done);
          }
        }
      };
    },
    dropWhile: function(seq, f) {
      var seen;
      seq = asSeq(seq);
      seen = false;
      return {
        next: function(done) {
          return seq.next(function(s, v) {
            if (s != null) {
              return done(s);
            }
            if (f(v) && !seen) {
              return done(SKIP);
            } else {
              seen = true;
              return done(null, v);
            }
          });
        }
      };
    },
    takeWhile: function(seq, f) {
      seq = asSeq(seq);
      return {
        next: function(done) {
          return seq.next(function(s, v) {
            if (s != null) {
              return done(s);
            }
            if (f(v)) {
              return done(null, v);
            } else {
              return done(END);
            }
          });
        }
      };
    },
    filter: function(seq, f) {
      seq = asSeq(seq);
      return {
        next: function(done) {
          return seq.next(function(s, v) {
            if (s != null) {
              return done(s);
            } else if (f(v)) {
              return done(null, v);
            } else {
              return done(SKIP);
            }
          });
        }
      };
    },
    join: function(seqs) {
      var current, nextCurrent, nextSeq;
      seqs = asSeq(seqs);
      current = void 0;
      nextCurrent = function(done) {
        return current.next(function(s, v) {
          if (s === END) {
            current = void 0;
            return nextSeq(done);
          } else {
            return done(s, v);
          }
        });
      };
      nextSeq = function(done) {
        return seqs.next(function(s, seq) {
          if (s === END) {
            return done(END);
          } else {
            current = asSeq(seq);
            return nextCurrent(done);
          }
        });
      };
      return {
        next: function(done) {
          if (!current) {
            return nextSeq(done);
          } else {
            return nextCurrent(done);
          }
        }
      };
    },
    mapCat: function(seq, f) {
      return mod.join(mod.map(seq, f));
    },
    series: function(f, seed) {
      return {
        next: function(done) {
          var _this = this;
          return asSeq(seed).next(function(s, v) {
            if (s != null) {
              return done(s);
            }
            seed = f(v);
            return done(null, v);
          });
        }
      };
    },
    zip: function() {
      var seqs,
        _this = this;
      seqs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (seqs.length === 0) {
        return mod.empty();
      }
      seqs = seqs.map(asSeq);
      return {
        next: function(done) {
          var seq, values;
          values = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = seqs.length; _i < _len; _i++) {
              seq = seqs[_i];
              _results.push(promiseNextValue(seq));
            }
            return _results;
          })();
          return q.all(values).then(function(values) {
            var s, v, _i, _len, _ref;
            for (_i = 0, _len = values.length; _i < _len; _i++) {
              _ref = values[_i], s = _ref[0], v = _ref[1];
              if (s != null) {
                return done(s);
              }
            }
            return done(null, (function() {
              var _j, _len1, _ref1, _results;
              _results = [];
              for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
                _ref1 = values[_j], s = _ref1[0], v = _ref1[1];
                _results.push(v);
              }
              return _results;
            })());
          });
        }
      };
    },
    reduced: function(seq, f, s, p, n) {
      var onValue;
      if (p == null) {
        p = null;
      }
      if (n == null) {
        n = 0;
      }
      seq = asSeq(seq);
      p = p || q.defer();
      onValue = function(ns, v) {
        var nv;
        if (ns === END) {
          return p.resolve(s);
        } else {
          nv = ns === SKIP ? s : f ? f(v, s) : v;
          if (n > yieldEvery) {
            n = 0;
            return setImmediate(function() {
              return mod.reduced(seq, f, nv, p, n + 1);
            });
          } else {
            return mod.reduced(seq, f, nv, p, n + 1);
          }
        }
      };
      seq.next(onValue);
      return p;
    },
    produced: function(seq) {
      return mod.reduced(seq, (function(v, s) {
        return s.concat([v]);
      }), []);
    }
  };
};

module.exports = makeModule(asSeq);

module.exports.makeModule = makeModule;

module.exports.valueAsSeq = valueAsSeq;

module.exports.promiseAsSeq = promiseAsSeq;

module.exports.arrayAsSeq = arrayAsSeq;

module.exports.promiseNextValue = promiseNextValue;
