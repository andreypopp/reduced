// Generated by CoffeeScript 1.6.3
var all, asSeq, deepEqual, drop, dropWhile, equal, filter, fold, join, lazy, map, mapCat, ok, produced, reduced, repeat, resolve, scan, series, take, takeWhile, window, zip, _ref, _ref1, _ref2;

_ref = require('assert'), deepEqual = _ref.deepEqual, equal = _ref.equal, ok = _ref.ok;

_ref1 = require('./index'), asSeq = _ref1.asSeq, lazy = _ref1.lazy, repeat = _ref1.repeat, map = _ref1.map, scan = _ref1.scan, fold = _ref1.fold, series = _ref1.series, take = _ref1.take, drop = _ref1.drop, takeWhile = _ref1.takeWhile, dropWhile = _ref1.dropWhile, filter = _ref1.filter, join = _ref1.join, mapCat = _ref1.mapCat, zip = _ref1.zip, window = _ref1.window, reduced = _ref1.reduced, produced = _ref1.produced;

_ref2 = require('kew'), resolve = _ref2.resolve, all = _ref2.all;

describe('creating seqs with asSeq', function() {
  var sum;
  sum = function(seq) {
    return reduced(seq, (function(v, a) {
      return a + v;
    }), 0);
  };
  it('creates a seq from an array', function(done) {
    return (sum(asSeq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))).then(function(x) {
      return equal(x, 55);
    }).fin(done).end();
  });
  it('creates a seq from a value', function(done) {
    return (sum(asSeq(10))).then(function(x) {
      return equal(x, 10);
    }).fin(done).end();
  });
  it('creates an empty seq from undethened', function(done) {
    return (sum(asSeq())).then(function(x) {
      return equal(x, 0);
    }).fin(done).end();
  });
  it('creates an empty seq from null', function(done) {
    return (sum(asSeq())).then(function(x) {
      return equal(x, 0);
    }).fin(done).end();
  });
  return it('creates a seq from a promise', function(done) {
    return (sum(asSeq(resolve(10)))).then(function(x) {
      return equal(x, 10);
    }).fin(done).end();
  });
});

describe('combinators', function() {
  describe('map', function() {
    it('map a function over seq', function(done) {
      var seq;
      seq = map([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(v) {
        return v + 1;
      });
      return produced(seq).then(function(v) {
        return deepEqual(v, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);
      }).fin(done).end();
    });
    return it('does not flatten', function(done) {
      var seq;
      seq = map([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(v) {
        return [v + 1];
      });
      return produced(seq).then(function(v) {
        return deepEqual(v, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(function(v) {
          return [v];
        }));
      }).fin(done).end();
    });
  });
  it('provides scan', function(done) {
    var seq;
    seq = scan([1, 2, 3, 4, 5], (function(v, a) {
      return v + a;
    }), 0);
    return produced(seq).then(function(v) {
      return deepEqual(v, [1, 3, 6, 10, 15]);
    }).fin(done).end();
  });
  it('provides fold', function(done) {
    var seq;
    seq = fold([1, 2, 3, 4, 5], (function(v, a) {
      return v + a;
    }), 0);
    return reduced(seq).then(function(v) {
      return equal(v, 15);
    }).fin(done).end();
  });
  describe('take', function() {
    it('takes some number of elements from the start', function(done) {
      var seq;
      seq = take([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5);
      return produced(seq).then(function(v) {
        return deepEqual(v, [1, 2, 3, 4, 5]);
      }).fin(done).end();
    });
    return it('can take no elements', function(done) {
      var seq;
      seq = take([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0);
      return produced(seq).then(function(v) {
        return deepEqual(v, []);
      }).fin(done).end();
    });
  });
  describe('drop', function() {
    it('drop some number of elements from the start', function(done) {
      var seq;
      seq = drop([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5);
      return produced(seq).then(function(v) {
        return deepEqual(v, [6, 7, 8, 9, 10]);
      }).fin(done).end();
    });
    return it('can drop no elements', function(done) {
      var seq;
      seq = drop([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0);
      return produced(seq).then(function(v) {
        return deepEqual(v, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
      }).fin(done).end();
    });
  });
  it('provides takeWhile', function(done) {
    var seq;
    seq = takeWhile([1, 2, 3, 4, 5, 6, 7, 8, 9, 10].concat([1, 2]), function(v) {
      return v < 6;
    });
    return produced(seq).then(function(v) {
      return deepEqual(v, [1, 2, 3, 4, 5]);
    }).fin(done).end();
  });
  it('provides dropWhile', function(done) {
    var seq;
    seq = dropWhile([1, 2, 3, 4, 5, 6, 7, 8, 9, 10].concat([1, 2]), function(v) {
      return v < 6;
    });
    return produced(seq).then(function(v) {
      return deepEqual(v, [6, 7, 8, 9, 10].concat([1, 2]));
    }).fin(done).end();
  });
  it('provides filter', function(done) {
    var seq;
    seq = filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(v) {
      return v % 2 === 0;
    });
    return produced(seq).then(function(v) {
      return deepEqual(v, [2, 4, 6, 8, 10]);
    }).fin(done).end();
  });
  describe('zip', function() {
    it('zips several seqs into one', function(done) {
      var seq, _i, _results;
      seq = zip([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (function() {
        _results = [];
        for (_i = 101; _i <= 200; _i++){ _results.push(_i); }
        return _results;
      }).apply(this));
      return produced(seq).then(function(v) {
        return deepEqual(v, [[1, 1, 101], [2, 2, 102], [3, 3, 103], [4, 4, 104], [5, 5, 105], [6, 6, 106], [7, 7, 107], [8, 8, 108], [9, 9, 109], [10, 10, 110]]);
      }).fin(done).end();
    });
    return it('can zip nothing', function(done) {
      var seq;
      seq = zip();
      return produced(seq).then(function(v) {
        return deepEqual(v, []);
      }).fin(done).end();
    });
  });
  describe('join', function() {
    it('joins', function(done) {
      return produced(join([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])).then(function(v) {
        return deepEqual(v, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
      }).fin(done).end();
    });
    it('flattens', function(done) {
      return produced(join([1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function(v) {
        return [v];
      }))).then(function(v) {
        return deepEqual(v, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
      }).fin(done).end();
    });
    return it('works with mixed returned values', function(done) {
      return produced(join([1, [2], 3])).then(function(v) {
        return deepEqual(v, [1, 2, 3]);
      }).fin(done).end();
    });
  });
  describe('mapCat', function() {
    it('maps and flattens', function(done) {
      var seq;
      seq = mapCat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(x) {
        return [x];
      });
      return produced(seq).then(function(v) {
        return deepEqual(v, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
      }).fin(done).end();
    });
    return it('works with mixed returned values', function(done) {
      var seq;
      seq = mapCat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(x) {
        if (x % 2 === 0) {
          return [x];
        } else {
          return x;
        }
      });
      return produced(seq).then(function(v) {
        return deepEqual(v, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
      }).fin(done).end();
    });
  });
  it('provides repeat', function(done) {
    var seq;
    seq = repeat(10);
    return produced(take(seq, 5)).then(function(v) {
      return deepEqual(v, [10, 10, 10, 10, 10]);
    }).fin(done).end();
  });
  describe('series', function() {
    it('generates new value from the previous one', function(done) {
      var seq;
      seq = series((function(v) {
        return v + 1;
      }), 0);
      return produced(take(seq, 10)).then(function(v) {
        return deepEqual(v, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
      }).fin(done).end();
    });
    return it('flattens', function(done) {
      var seq;
      seq = series((function(v) {
        return [v + 1];
      }), 0);
      return produced(take(seq, 10)).then(function(v) {
        return deepEqual(v, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
      }).fin(done).end();
    });
  });
  return describe('window', function() {
    it('generates a sliding window', function(done) {
      var seq;
      seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      return produced(window(seq, 2)).then(function(v) {
        return deepEqual(v, [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10]]);
      }).fin(done).end();
    });
    return it('works even if seq has not enough elements', function(done) {
      var seq;
      seq = [1, 2, 3, 4];
      return produced(window(seq, 5)).then(function(v) {
        return deepEqual(v, [[1, 2, 3, 4], [2, 3, 4], [3, 4], [4]]);
      }).fin(done).end();
    });
  });
});

describe('lazy', function() {
  return it('can defer collection creation', function(done) {
    var seq;
    seq = lazy(function() {
      return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    });
    return produced(seq).then(function(v) {
      return deepEqual(v, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    }).fin(done).end();
  });
});

describe('insane case', function() {
  return it('is still alive', function(done) {
    var x, _, _i, _j, _results;
    x = (function() {
      _results = [];
      for (_i = 1; _i <= 100000; _i++){ _results.push(_i); }
      return _results;
    }).apply(this);
    for (_ = _j = 1; _j <= 20; _ = ++_j) {
      x = map(x, function(v) {
        return v;
      });
    }
    return reduced(x).then(function(v) {
      return equal(v, 100000);
    }).fin(done).end();
  });
});
